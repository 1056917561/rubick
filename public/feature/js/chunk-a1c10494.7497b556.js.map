{"version":3,"sources":["webpack:///./src/views/account/index.vue","webpack:///./src/views/account/index.vue?6b5a","webpack:///./src/views/account/index.vue?907c","webpack:///./node_modules/nanoid/index.browser.js","webpack:///./node_modules/eslint-loader/index.js"],"names":["userInfo","ref","window","rubick","dbStorage","getItem","imgCode","scene","nanoid","visible","showModal","value","service","getScanCode","then","res","dataUrl","timer","watch","setInterval","checkLoginStatus","console","log","openId","setItem","message","success","clearInterval","__exports__","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","instance","axios","create","baseURL","process","get","params","data","post","getUserInfo"],"mappings":"+OAgCA,IAAMA,EAAWC,eAAIC,OAAOC,OAAOC,UAAUC,QAAQ,qBAE/CC,EAAUL,eAAI,IACdM,EAAQC,iBAERC,EAAUR,gBAAI,GACdS,EAAY,WAChBD,EAAQE,OAAQ,EACXL,EAAQK,OAAUX,EAASW,OAC9BC,OAAQC,YAAY,CAAEN,UAASO,MAAK,SAACC,GACnCT,EAAQK,MAAR,gCAAyCI,EAAIC,aAK/CC,EAAQ,K,OACZC,gBAAM,CAACT,IAAU,WACXA,EAAQE,MACVM,EAAQE,aAAY,WAClBP,OAAQQ,iBAAiB,CAAEb,UAASO,MAAK,SAACC,GACxCM,QAAQC,IAAIP,GACRA,EAAIQ,SACNrB,OAAOC,OAAOC,UAAUoB,QAAQ,mBAAoBT,GACpDf,EAASW,MAAQI,EACjBU,OAAQC,QAAQ,SAChBjB,EAAQE,OAAQ,EAChBgB,cAAcV,GACdA,EAAQ,WAGX,MAEHU,cAAcV,GACdA,EAAQ,S,s1BC3DZ,MAAMW,EAA2B,IAAgB,EAAQ,CAAC,CAAC,YAAY,qBAExD,gB,kCCRf,W,2DCAA,kCACO,IAkBIpB,EAAS,CAACqB,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,OAAO,CAACC,EAAIC,KACvDA,GAAQ,GAEND,GADEC,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAEDD,GACN,K,mFC9BCI,EAAWC,IAAMC,OAAO,CAC5BC,QAASC,4BAGI,QACP7B,YADO,YACiC,wJAA1BN,EAA0B,EAA1BA,MAA0B,SAC1B+B,EAASK,IAAI,qBAAsB,CACnDC,OAAQ,CACNrC,WAHwC,cACtCQ,EADsC,yBAMrCA,EAAI8B,MANiC,8CASxCzB,iBAVO,YAUsC,wJAA1Bb,EAA0B,EAA1BA,MAA0B,SAC/B+B,EAASQ,KAAK,0BAA2B,CACzDvC,UAF+C,cAC3CQ,EAD2C,yBAI1CA,EAAI8B,MAJsC,8CAO7CE,YAjBO,YAiBmC,wJAA5BxB,EAA4B,EAA5BA,OAA4B,SAC5Be,EAASQ,KAAK,qBAAsB,CACpDvB,WAF4C,cACxCR,EADwC,yBAIvCA,EAAI8B,MAJmC","file":"js/chunk-a1c10494.7497b556.js","sourcesContent":["<template>\n  <div class=\"account\">\n    <a-result\n      v-if=\"!userInfo\"\n      title=\"请先登录\"\n      sub-title=\"用户暂未登录，无法体验更多设置\"\n    >\n      <template #extra>\n        <a-button @click=\"showModal\" type=\"primary\">\n          使用微信小程序登录\n        </a-button>\n      </template>\n    </a-result>\n    <a-modal :footer=\"null\" v-model:visible=\"visible\">\n      <a-result\n        title=\"请使用微信扫码登录!\"\n        sub-title=\"使用微信扫描上面的 rubick 小程序二维码进行授权登录\"\n      >\n        <template #icon>\n          <img width=\"200\" :src=\"imgCode\" />\n        </template>\n      </a-result>\n    </a-modal>\n  </div>\n</template>\n\n<script setup>\nimport { nanoid } from 'nanoid';\nimport { ref, watch } from 'vue';\nimport { message } from 'ant-design-vue';\nimport service from '../../assets/service';\n\nconst userInfo = ref(window.rubick.dbStorage.getItem('rubick-user-info'));\n\nconst imgCode = ref('');\nconst scene = nanoid();\n\nconst visible = ref(false);\nconst showModal = () => {\n  visible.value = true;\n  if (!imgCode.value && !userInfo.value) {\n    service.getScanCode({ scene }).then((res) => {\n      imgCode.value = `data:image/png;base64,${res.dataUrl}`;\n    });\n  }\n};\n\nlet timer = null;\nwatch([visible], () => {\n  if (visible.value) {\n    timer = setInterval(() => {\n      service.checkLoginStatus({ scene }).then((res) => {\n        console.log(res);\n        if (res.openId) {\n          window.rubick.dbStorage.setItem('rubick-user-info', res);\n          userInfo.value = res;\n          message.success('登录成功！');\n          visible.value = false;\n          clearInterval(timer);\n          timer = null;\n        }\n      });\n    }, 2000);\n  } else {\n    clearInterval(timer);\n    timer = null;\n  }\n});\n</script>\n\n<style lang=\"less\" scoped>\n.account {\n  box-sizing: border-box;\n  width: 100%;\n  overflow-x: hidden;\n  background: var(--color-body-bg);\n  height: calc(~'100vh - 46px');\n  :deep(.ant-result-title) {\n    color: var(--color-text-primary);\n  }\n  :deep(.ant-result-subtitle) {\n    color: var(--color-text-desc);\n  }\n}\n</style>\n","import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=2bc021e6&lang=less&scoped=true\"\n\nimport exportComponent from \"/Users/muwoo/rubick-wks/rubick/feature/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-2bc021e6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--11-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./index.vue?vue&type=style&index=0&id=2bc021e6&lang=less&scoped=true\"","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE,\n});\n\nexport default {\n  async getScanCode({ scene }: { scene: string }) {\n    const res = await instance.get('/users/getScanCode', {\n      params: {\n        scene,\n      },\n    });\n    return res.data;\n  },\n\n  async checkLoginStatus({ scene }: { scene: string }) {\n    const res = await instance.post('/users/checkLoginStatus', {\n      scene,\n    });\n    return res.data;\n  },\n\n  async getUserInfo({ openId }: { openId: string }) {\n    const res = await instance.post('/users/getUserInfo', {\n      openId,\n    });\n    return res.data;\n  },\n};\n"],"sourceRoot":""}